"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–≥-–±–æ—Ç–æ–º"""
import os.path
from random import shuffle
import requests
import telebot
import sqlalchemy
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import or_
from telebot.handler_backends import State, StatesGroup
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from models import Words, Users, Vocabulary
from models import create_tables, fill_db_with_default_data, get_words_list

### –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•
PATH = "config.env"

if os.path.exists(PATH):
    load_dotenv(PATH)
else:
    raise FileNotFoundError("–§–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω")

TOKEN = os.getenv("TOKEN")
login = os.getenv("LOGIN")
password = os.getenv("PASSWORD")
host = os.getenv("HOST")
db_name = os.getenv("DATABASE_NAME")
port = os.getenv("PORT")
TRANSLATE_TOKEN = os.getenv("TRANSLATE_TOKEN")

bot = telebot.TeleBot(TOKEN)
DSN = f'postgresql://{login}:{password}@{host}:{port}/{db_name}'
engine = sqlalchemy.create_engine(DSN)
Session = sessionmaker(bind=engine)

create_tables(engine)  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–¥, —É—á–µ–±–Ω–∞—è –≤–µ—â—å

SESSION = Session()
fill_db_with_default_data(SESSION)
SESSION.close()
### –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•

class Commands:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    REFUSE_NAME_ENTER = "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –≤–≤–æ–¥–∏—Ç—å –∏–º—è"
    ADD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
    DELETE = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
    TRAIN = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    HELP = "–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è"
    MY_DICTIONARY = "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å"
    YES = "–î–∞‚úÖ"
    NO = "–ù–µ—Ç‚ùå"
    STOP_TRAINING = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"
    LET_TRANSLATE = "–ü–µ—Ä–µ–≤–µ–¥–∏ –º–æ–µ —Å–ª–æ–≤–æ —Å–∞–º"

class MyStates(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    default = State()
    waiting_for_name = State()
    waiting_for_target_word = State()
    waiting_for_translation = State()
    waiting_word_to_del = State()
    training = State()
    training_check = State()

class BotMessages:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    WELCOME = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤!

‚ú® –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

1. –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: –°–∫–∞–∂–∏—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è –≤–∞—Å, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —É—á–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ!
   
2. –£–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è: –ö–æ–≥–¥–∞ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –æ—Å–≤–æ–∏–ª–∏ —Å–ª–æ–≤–æ, –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å, –∏ —è —É–¥–∞–ª—é –µ–≥–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.

3. –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–∞–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å–≤–µ–∂–∏—Ç—å –ø–∞–º—è—Ç—å –∏ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏.

–ù–∞—á–Ω–µ–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞? üí™üìö –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º, —è –±—ã —Ö–æ—Ç–µ–ª –∑–Ω–∞—Ç—å, –∫–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è
"""
    WELCOME_AGAIN = """
üëã –†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤!

‚ú® –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

1. –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è –≤–∞—Å, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —É—á–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ!
   
2. –£–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è: –ö–æ–≥–¥–∞ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –æ—Å–≤–æ–∏–ª–∏ —Å–ª–æ–≤–æ, –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å, –∏ —è —É–¥–∞–ª—é –µ–≥–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.

3. –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–∞–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å–≤–µ–∂–∏—Ç—å –ø–∞–º—è—Ç—å –∏ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏.

–ù–∞—á–Ω–µ–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞? üí™üìö
"""
    WAITING_NEW_WORD_ENG = """
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏üá¨üáß‚Äã‚Äã
"""
    WAITING_NEW_WORD_RUS = """
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫üá∑üá∫‚Äã‚Äã
"""
    ANSWER_FOR_ANON = """
–ü–æ–Ω–∏–º–∞—é! –í–∞–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –≤ —Å–µ—Ç–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–µ? üìöüòä
"""
    ANSWER_FOR_USER = """
–ü—Ä–∏–≤–µ—Ç! üòä –Ø —Ä–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è! üéâ‚ú®
"""
    INVALID_TARGET_WORD = """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! üòî

–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –µ—â–µ —Ä–∞–∑! üòä 

–û–±—Ä–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ (–∞ —Ç–∞–∫–∂–µ –¥–æ–ø—É—Å—Ç–∏–º —Å–∏–º–≤–æ–ª –¥–µ—Ñ–∏—Å–∞)
"""
    INVALID_TRASLATION = """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ —Å–ª–æ–≤–æ - –Ω–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π! üòî

–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –µ—â–µ —Ä–∞–∑! üòä 

–û–±—Ä–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–∞ —Ç–∞–∫–∂–µ –¥–æ–ø—É—Å—Ç–∏–º —Å–∏–º–≤–æ–ª –¥–µ—Ñ–∏—Å–∞)
"""
    WORD_SUCCESS_ADDED = """
–û—Ç–ª–∏—á–Ω–æ!üòä –ü–∞—Ä–∞ —Å–ª–æ–≤ {} - {} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?
"""
    WAITING_DEL_WORD_ENG = """
–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ –∏ —É–∂–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å!
"""
    SUCCESS_DELETE_WORD = """
–°–ª–æ–≤–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. –ö–æ–º–∞–Ω–¥—É–π—Ç–µ, —á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?
"""
    FAILURE_DELETE_WORD = """
–í—ã —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏!
"""
    TRAINING_MODE = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üéâ

–°–µ–≥–æ–¥–Ω—è –º—ã –±—É–¥–µ–º —É—á–∏—Ç—å—Å—è –Ω–æ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —É–ª—É—á—à–∞—Ç—å –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ì–æ—Ç–æ–≤—ã?
"""
    TRAINING_MODE_ITERATION = """
–í–∞—à–µ —Å–ª–æ–≤–æ - {}. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥!
"""
    STOP_TRAINING = """
–•–æ—Ä–æ—à–æ! –°–∫–∞–∂–∏—Ç–µ –º–Ω–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è üí™
"""
    CORRECT_ANSWER = """
–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç‚úÖ
"""
    INCORRECT_ANSWER = """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
"""
    NO_WORDS_LEFT = """
–°—É–ø–µ—Ä! –í—Å–µ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!
"""
    FAILURE_TRANSLATE = """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤—Ä—É—á–Ω—É—éüìö
"""
    SHOW_DICTIONARY = """
–°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏–∑—É—á–∞–µ—Ç–µ:
{}
"""
    NO_WORDS_IN_DICT = """
–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞!
"""
    INVALID_USER = """
–°–ª—É—à–∞–π—Ç–µ, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ —è –≤–∞—Å –∑–∞–±—ã–ª –∏–ª–∏ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª! –î–∞–≤–∞–π—Ç–µ —Å—Ä–æ—á–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—èüòä –ù–∞–ø–∏—à–∏ –º–Ω–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ "–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è"
"""

MARKUP_DEFAULT = ReplyKeyboardMarkup(resize_keyboard=True)
DEFAULT_BUTTONS = [
    KeyboardButton(Commands.ADD),
    KeyboardButton(Commands.DELETE),
    KeyboardButton(Commands.TRAIN),
    KeyboardButton(Commands.HELP),
    KeyboardButton(Commands.MY_DICTIONARY)
]
MARKUP_DEFAULT.add(*DEFAULT_BUTTONS)

def validate_target_word(target):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–¥.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        target (str): –°–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –¥–æ–ø—É—Å—Ç–∏–º–æ, –∏–Ω–∞—á–µ False.

    """
    allowed_chars = 'abcdefghijklmnopqrstuvwxyz'
    allowed_chars += allowed_chars.upper() + '- '
    if not target:
        return False
    for char in target:
        if char not in allowed_chars:
            return False
    return True

def validate_translation(translate):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        translate (str): –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º, –∏–Ω–∞—á–µ False.

    """
    allowed_chars = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
    allowed_chars += allowed_chars.upper() + '- '
    if not translate:
        return False
    for char in translate:
        if char not in allowed_chars:
            return False
    return True

def translate_word(word):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é API –Ø–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ–≤–∞—Ä–µ–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        word (str): –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str or None: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.
    
    """
    url = 'https://dictionary.yandex.net/api/v1/dicservice.json/lookup'
    params = {
        'key': TRANSLATE_TOKEN,
        'lang': 'en-ru',
        'text': word,
    }
    response = requests.get(url, params=params, timeout=10)
    tr_json = response.json()
    flag_found = False
    trans_word = None

    for definition in tr_json['def']:
        if not flag_found:
            for translation in definition['tr']:
                trans_word = translation['text']
                flag_found = True
                break  # –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç
    if trans_word is None:
        return None
    return trans_word.lower()

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏ /help.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. 
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ 
    –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ. –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∏–º—è –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 
    –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 
                                         —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—É.

    –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

    """
    chat_id = message.chat.id
    keybord_markup = ReplyKeyboardMarkup(resize_keyboard=True)

    session = Session()
    user = list(
        session.query(Users.name, Users.tg_id).\
            select_from(Users).\
            filter(Users.tg_id == message.from_user.id).all()
        )
    session.close()

    if user:
        bot.send_message(
            chat_id,
            BotMessages.WELCOME_AGAIN,
            reply_markup=MARKUP_DEFAULT
        )
        bot.set_state(
            message.from_user.id,
            MyStates.default,  # –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            message.chat.id
            )
    else:
        button = KeyboardButton(Commands.REFUSE_NAME_ENTER)
        keybord_markup.add(button)
        bot.send_message(
            chat_id,
            BotMessages.WELCOME,
            reply_markup=keybord_markup
        )
        bot.set_state(
            message.from_user.id,
            MyStates.waiting_for_name,  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞–≤–∞—Ç—å
            message.chat.id             # –∏–º—è, —Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        )                               # —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–∞

@bot.message_handler(
        func=lambda message:
        bot.get_state(message.from_user.id) == MyStates.waiting_for_name.name)
def set_name(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è, –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. 
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º, —Å–æ–∑–¥–∞–µ—Ç—Å—è 
    –∑–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º "–ê–Ω–æ–Ω–∏–º".
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º 
                                         –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –æ—Ç–∫–∞–∑–∞.

    –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

    """
    username = message.text
    session = Session()
    if username == Commands.REFUSE_NAME_ENTER:
        bot.reply_to(
            message,
            BotMessages.ANSWER_FOR_ANON,
            reply_markup=MARKUP_DEFAULT
        )
        user = Users(tg_id=message.from_user.id, name="–ê–Ω–æ–Ω–∏–º")
    else:
        bot.reply_to(
            message,
            BotMessages.ANSWER_FOR_USER.format(username),
            reply_markup=MARKUP_DEFAULT
        )
        user = Users(tg_id=message.from_user.id, name=username)

    session.add(user)
    session.commit()

    session.close()
    bot.set_state(message.from_user.id, MyStates.default, message.chat.id)

@bot.message_handler(func=lambda message: message.text == Commands.ADD)
def add_word(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 
                                         –∫–æ–º–∞–Ω–¥–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.

    """
    chat_id = message.chat.id

    bot.send_message(chat_id, BotMessages.WAITING_NEW_WORD_ENG, reply_markup=ReplyKeyboardMarkup())
    bot.set_state(message.from_user.id, MyStates.waiting_for_target_word, chat_id)

@bot.message_handler(
        func=lambda message:
        bot.get_state(message.from_user.id) == MyStates.waiting_for_target_word.name)
def add_word_input_target(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ), 
    —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 
    –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 
                                         —Ü–µ–ª–µ–≤—ã–º —Å–ª–æ–≤–æ–º.

    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    target_word = message.text.lower()

    if not validate_target_word(target_word):
        bot.reply_to(message, BotMessages.INVALID_TARGET_WORD)
        return  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–æ–≤ –¥–∞–ª–µ–µ
    keyboard_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup.add(KeyboardButton(Commands.LET_TRANSLATE))

    bot.send_message(
        chat_id,
        BotMessages.WAITING_NEW_WORD_RUS,
        reply_markup=keyboard_markup
        )
    bot.set_state(
        user_id,
        MyStates.waiting_for_translation,
        chat_id
    )
    with bot.retrieve_data(user_id, chat_id) as data:
        data['target_word'] = target_word

@bot.message_handler(
        func=lambda message:
        bot.get_state(message.from_user.id) == MyStates.waiting_for_translation.name)
def add_word_input_translation(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    translation = message.text
    with bot.retrieve_data(user_id, chat_id) as data:
        target_word = data['target_word']

    if translation == Commands.LET_TRANSLATE:
        translation = translate_word(target_word)
        if translation is None:
            bot.send_message(chat_id, BotMessages.FAILURE_TRANSLATE)
            return
    translation = translation.lower()
    if not validate_translation(translation):
        bot.reply_to(message, BotMessages.INVALID_TRASLATION)
        return  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–æ–≤ –¥–∞–ª–µ–µ

    session = Session()

    user_query = session.query(Users).\
            filter(Users.tg_id == message.from_user.id).all()
    if len(list(user_query)) > 0:
        user = user_query[0]

        word_pair = Words(target=target_word, translation=translation)
        vocabulary_pair = Vocabulary(user=user, word=word_pair)

        session.add_all([word_pair, vocabulary_pair])
        session.commit()
        session.close()
    else:
        bot.send_message(
            chat_id,
            BotMessages.INVALID_USER,
            reply_markup=MARKUP_DEFAULT
        )
        bot.set_state(user_id, MyStates.default, chat_id)
        session.close()
        return

    bot.send_message(
        message.chat.id,
        BotMessages.WORD_SUCCESS_ADDED.format(target_word, translation),
        reply_markup=MARKUP_DEFAULT
    )
    bot.set_state(user_id, MyStates.default, chat_id)

@bot.message_handler(func=lambda message: message.text == Commands.DELETE)
def delete_word(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    """
    chat_id = message.chat.id
    user_id = message.from_user.id

    bot.send_message(chat_id, BotMessages.WAITING_DEL_WORD_ENG)
    bot.set_state(user_id, MyStates.waiting_word_to_del, chat_id)

@bot.message_handler(
        func=lambda message:
        bot.get_state(message.from_user.id) == MyStates.waiting_word_to_del.name)
def delete_word_from_db(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–≤–æ, –∏, –µ—Å–ª–∏ –¥–∞, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    word_to_del = message.text.lower()
    chat_id = message.chat.id
    user_id = message.from_user.id

    session = Session()
    word_query = session.query(Vocabulary.id, Words.id).select_from(Words).\
        join(Vocabulary, Vocabulary.word_id == Words.id).\
        join(Users, Users.id == Vocabulary.user_id).\
            filter(Users.tg_id == user_id).\
            filter(or_(Words.target == word_to_del, Words.translation == word_to_del))

    if len(list(word_query)) > 0:
        voc_id, words_id = word_query[0]
        session.query(Vocabulary).filter(Vocabulary.id == voc_id).delete()
        session.query(Words).filter(Words.id == words_id).delete()
        session.commit()
        bot.send_message(
            chat_id,
            BotMessages.SUCCESS_DELETE_WORD,
            reply_markup=MARKUP_DEFAULT
        )
    else:
        bot.send_message(
            chat_id,
            BotMessages.FAILURE_DELETE_WORD,
            reply_markup=MARKUP_DEFAULT
        )
        session.close()
        return
    session.close()
    bot.set_state(user_id, MyStates.default, chat_id)

@bot.message_handler(func=lambda message: message.text == Commands.TRAIN)
def train_words(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    keyboard_markup = ReplyKeyboardMarkup(resize_keyboard=True)

    keyboard_markup.add(KeyboardButton(Commands.YES), KeyboardButton(Commands.NO))
    chat_id = message.chat.id
    user_id = message.from_user.id

    bot.send_message(chat_id, BotMessages.TRAINING_MODE, reply_markup=keyboard_markup)
    bot.set_state(user_id, MyStates.training, chat_id)
    with bot.retrieve_data(user_id, chat_id) as data:
        data['target_word'] = None
        data['translation'] = None
        data['all_words'] = None

@bot.message_handler(
        func=lambda message:
        bot.get_state(message.from_user.id) == MyStates.training.name)
def train_mode_iteration_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    answer = message.text
    chat_id = message.chat.id
    user_id = message.from_user.id

    if answer == Commands.NO or answer == Commands.STOP_TRAINING:
        bot.send_message(chat_id, BotMessages.STOP_TRAINING, reply_markup=MARKUP_DEFAULT)
        bot.set_state(user_id, MyStates.default, chat_id)
        return

    with bot.retrieve_data(user_id, chat_id) as data:
        if data['all_words'] is not None:
            all_words = data['all_words']
        else:
            session = Session()
            all_words = get_words_list(session, user_id)
            session.close()

    if len(all_words) < 4:
        bot.send_message(chat_id, BotMessages.NO_WORDS_LEFT, reply_markup=MARKUP_DEFAULT)
        bot.set_state(user_id, MyStates.default, chat_id)
        return

    shuffle(all_words)
    others = all_words[-4:]
    target_word, translation = others[-1]
    shuffle(others)

    keyboard_markup = ReplyKeyboardMarkup()
    for _, transl in others:
        keyboard_markup.add(transl)
    keyboard_markup.add(Commands.STOP_TRAINING, *DEFAULT_BUTTONS)

    bot.send_message(
        chat_id,
        BotMessages.TRAINING_MODE_ITERATION.format(target_word),
        reply_markup=keyboard_markup
    )
    bot.set_state(user_id, MyStates.training_check, chat_id)
    with bot.retrieve_data(user_id, chat_id) as data:
        data['target_word'] = target_word
        data['translation'] = translation
        data['all_words'] = all_words[:-1]

@bot.message_handler(
        func=lambda message:
        bot.get_state(message.from_user.id) == MyStates.training_check.name)
def train_mode_iteration_end(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, 
    –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –µ–≥–æ –æ—Ç–≤–µ—Ç. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç 
    –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π 
                                         –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    user_id = message.from_user.id
    chat_id = message.chat.id

    with bot.retrieve_data(user_id, chat_id) as data:
        translation = data['translation']

    if message.text == Commands.STOP_TRAINING:
        train_mode_iteration_start(message)
        return

    if translation == message.text:
        bot.send_message(chat_id, BotMessages.CORRECT_ANSWER)
        bot.set_state(user_id, MyStates.training, chat_id)
        train_mode_iteration_start(message)
    else:
        bot.send_message(chat_id, BotMessages.INCORRECT_ANSWER)
        return

@bot.message_handler(func=lambda message: message.text == Commands.HELP)
def show_help_info(message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π 
                                         –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–º–æ—â–∏.

    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π 
    –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == Commands.MY_DICTIONARY)
def show_dictionary(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.
    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ 
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–æ—Ä–º–∏—Ä—É—è –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, 
    —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–∞–ø—Ä–æ—Å 
                                         –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤–∞—Ä—è.

    """
    chat_id = message.chat.id
    user_id = message.from_user.id

    session = Session()

    dict_query = session.query(Words.target, Words.translation).select_from(Words).\
        join(Vocabulary, Vocabulary.word_id == Words.id).\
        join(Users, Users.id == Vocabulary.user_id).\
            filter(or_(Users.tg_id == user_id, Users.tg_id == 0))
    dict_list = list(dict_query)

    if len(dict_list) > 0:
        dict_str = "\n".join([" - ".join(i) for i in dict_list])
        bot.send_message(
            chat_id,
            BotMessages.SHOW_DICTIONARY.format(dict_str),
            reply_markup=MARKUP_DEFAULT
        )
    else:
        bot.send_message(
            chat_id,
            BotMessages.NO_WORDS_IN_DICT,
            reply_markup=MARKUP_DEFAULT
        )

    session.close()

if __name__ == '__main__':
    print("Bot is currently running...")
    bot.polling()
